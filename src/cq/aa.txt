version: '3'
services:
  cqhttp:
    # 服务名字
    container_name: cq_core
    # CQ WebAPI维护者镜像
    image: "richardchien/cqhttp:latest"
      # network_mode: "host"  # 取消注释此项将使容器使用宿主机网络，此时相当于插件直接运行在宿主机，下面的 ports 可以全部删掉，另外注意根据需要配置 CQHTTP 只监听 127.0.0.1
    ports:
        - "19000:9000"  # noVNC 管理
        # - "127.0.0.1:5700:5700"  # CQHTTP 默认的 HTTP 端口
        # - "127.0.0.1:6700:6700"  # CQHTTP 默认的 WebSocket 端口
    # 暴露端口给其他容器
    expose:
      - "8080"
      - "5700"
    restart: always  # 重启策略
    volumes:
        - ./coolq/:/home/user/coolq/  # 挂载 酷Q 主目录
    environment:
        VNC_PASSWD: 19920818  # noVNC 连接密码
        COOLQ_ACCOUNT: 2970532291  # 要登录的机器人 QQ 号
        # COOLQ_URL: http://dlsec.cqp.me/cqa-tuling  # 如果使用 酷Q Air，本行可以删除，如使用 酷Q Pro，需将 URL 中的 cqa-tuling 改为 cqp-tuling
        FORCE_ENV: "true"  # 强制使用环境变量中的配置（下面以 CQHTTP_ 开头的那些），这会使手动对 CQHTTP 配置文件的修改在重启容器后失效，删除此项则下面的配置只在容器第一次启动时写入配置文件
        CQHTTP_POST_URL: http://172.17.0.1:8080  # HTTP 上报地址，172.17.0.1 通常是宿主机在默认网桥上的 IP 地址，可通过 docker inspect bridge 查看
        CQHTTP_SERVE_DATA_FILES: "true"
        CQHTTP_USE_WS: "true"
        # 更多其它配置项
  py:
    # 服务名字
    container_name: cq_py
    build: ./py/
    # ports: 
      # - "8080:8080"
    volumes:
      - ./py/:/usr/src/myapp  # 挂载当前目录到容器中/usr/src/myapp
    #指定工作目录
    working_dir: /usr/src/myapp 
    ports:
        - "15700:5700"
    # 连接其他容器
    links: 
      - cqhttp:cq_core
    command: sh